<?php

namespace app\modules\matches\models;

use app\components\ModelBase;
use app\models\Flag;
use app\models\Setting;
use app\modules\entries\models\Competition;
use app\modules\entries\models\Place;
use app\modules\entries\models\Team;
use Exception;

/**
 * This is the model class for table "{{%matches}}".
 *
 * @property integer $id
 * @property integer $place_id
 * @property integer $team_id
 * @property integer $status_id
 * @property integer $type_id
 * @property integer $decision_id
 * @property integer $competition_id
 * @property string $description
 * @property string $date
 * @property integer $score_owner
 * @property integer $score_guest
 * @property string $observations
 * @property string $created_at
 * @property string $updated_at
 * @property integer $created_by
 *
 * @property MatchDatasheet[] $dataSheet
 * @property Competition $competition
 * @property Flag $decision
 * @property Place $place
 * @property Flag $status
 * @property Team $team
 * @property Flag $type
 */
class Match extends ModelBase
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%matches}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['place_id', 'team_id', 'status_id', 'type_id', 'date'], 'required'],
            [['place_id', 'team_id', 'status_id', 'type_id', 'decision_id', 'competition_id', 'score_owner', 'score_guest', 'created_by'], 'integer'],
            ['description', 'string', 'max' => 60],
            ['date', 'date', 'format' => 'php:d/m/Y'],
            [['date', 'created_at', 'updated_at'], 'safe'],
            [['competition_id'], 'exist', 'skipOnError' => true, 'targetClass' => Competition::className(), 'targetAttribute' => ['competition_id' => 'id']],
            [['decision_id'], 'exist', 'skipOnError' => true, 'targetClass' => Flag::className(), 'targetAttribute' => ['decision_id' => 'id']],
            [['place_id'], 'exist', 'skipOnError' => true, 'targetClass' => Place::className(), 'targetAttribute' => ['place_id' => 'id']],
            [['status_id'], 'exist', 'skipOnError' => true, 'targetClass' => Flag::className(), 'targetAttribute' => ['status_id' => 'id']],
            [['team_id'], 'exist', 'skipOnError' => true, 'targetClass' => Team::className(), 'targetAttribute' => ['team_id' => 'id']],
            [['type_id'], 'exist', 'skipOnError' => true, 'targetClass' => Flag::className(), 'targetAttribute' => ['type_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'place_id' => 'Local do Jogo',
            'team_id' => 'Adversário',
            'status_id' => 'Status',
            'type_id' => 'Tipo de Jogo',
            'decision_id' => 'Decisão',
            'competition_id' => 'Competição',
            'description' => 'Descrição',
            'date' => 'Data',
            'score_owner' => 'Score Owner',
            'score_guest' => 'Score Guest',
            'observations' => 'Observações do Jogo',
            'created_at' => $this->createdAtLabel,
            'updated_at' => $this->updateAtLabel,
            'created_by' => $this->createdByLabel,
        ];
    }

    public function beforeSave($insert)
    {
        $teamName = Setting::getSettingByAbbreviation('TEAM_NAME')->value;
        $this->description = "{$teamName} {$this->score_owner} X {$this->score_guest} {$this->team->name}";
        $this->decision_id = $this->getDecisionFlag();

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDataSheet()
    {
        return $this->hasMany(MatchDatasheet::className(), ['match_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCompetition()
    {
        return $this->hasOne(Competition::className(), ['id' => 'competition_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDecision()
    {
        return $this->hasOne(Flag::className(), ['id' => 'decision_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPlace()
    {
        return $this->hasOne(Place::className(), ['id' => 'place_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStatus()
    {
        return $this->hasOne(Flag::className(), ['id' => 'status_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTeam()
    {
        return $this->hasOne(Team::className(), ['id' => 'team_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getType()
    {
        return $this->hasOne(Flag::className(), ['id' => 'type_id']);
    }

    public function isSchedule()
    {
        return $this->status_id === Flag::MATCH_STATUS_SCHEDULED;
    }

    public function isFinalized()
    {
        return $this->status_id === Flag::MATCH_STATUS_FINALIZED;
    }

    public function isFriendly()
    {
        return $this->status_id === Flag::MATCH_TYPE_FRIENDLY;
    }

    public function isCompetition()
    {
        return $this->status_id === Flag::MATCH_TYPE_COMPETITION;
    }

    /**
     * @param MatchDatasheet[] $dataSheet
     * @throws Exception
     */
    public function registerDataSheet(array $dataSheet)
    {
        MatchDatasheet::deleteAll(['match_id' => $this->id]);

        if (empty($dataSheet))
            return;

        foreach ($dataSheet as $row) {
            $newDataSheet = new MatchDatasheet;
            $newDataSheet->match_id = $this->id;
            $newDataSheet->player_id = $row->player_id;
            $newDataSheet->goals = $row->goals;
            $newDataSheet->assists = $row->assists;

            if (!$newDataSheet->save())
                throw new Exception('Erro ao salvar a registro da ficha técnica.');
        }
    }

    /**
     * @return int
     */
    public function getDecisionFlag()
    {
        if ($this->score_owner > $this->score_guest) {
            return Flag::MATCH_DECISION_VICTORY;
        } else if ($this->score_owner == $this->score_guest) {
            return Flag::MATCH_DECISION_DRAW;
        } else {
            return Flag::MATCH_DECISION_DEFEAT;
        }
    }
}
